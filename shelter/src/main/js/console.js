let count = 0;

console.log(`
1) Реализация burger menu на обеих страницах: +26\n
\t-при ширине страницы меньше 768рх панель навигации скрывается, появляется бургер-иконка: \n \tИтого:${count} + 2 = ${count += 2}\n
\t-при нажатии на бургер-иконку, справа плавно появляется адаптивное меню шириной 320px, бургер-иконка плавно поворачивается на 90 градусов: \n \t${count} + 4 = ${count += 4}\n
\t-высота адаптивного меню занимает всю высоту экрана: \n \t${count} + 2 = ${count += 2}\n
\t-при повторном нажатии на бургер-иконку или на свободное от бургер-меню пространство адаптивное меню плавно скрывается уезжая за правую часть экрана, бургер-иконка плавно поворачивается на 90 градусов обратно: ${count} + 4 = ${count += 4}\n
\t-бургер-иконка создана при помощи html+css, без использования изображений: \n \t${count} + 2 = ${count += 2}\n
\t-ссылки в адаптивном меню работают, обеспечивая плавную прокрутку по якорям, сохраняются заданные на первом этапе выполнения задания требования интерактивности элементов меню: \n \t${count} + 2 = ${count += 2}\n
\t-при клике по любой ссылке (интерактивной или неинтерактивной) в меню адаптивное меню плавно скрывается вправо, бургер-иконка поворачивается на 90 градусов обратно: \n \t${count} + 2 = ${count += 2}\n
\t-расположение и размеры элементов в бургер-меню соответствует макету (центрирование по вертикали и горизонтали элементов меню, расположение иконки). При этом на странице Pets цветовая схема может быть как темная, так и светлая: \n \t${count} + 2 = ${count += 2}\n
\t-область, свободная от бургер-меню, затемняется: \n \t${count} + 2 = ${count += 2}\n
\t-страница под бургер-меню не прокручивается:\n \t${count} + 4 = ${count += 4}\n
2) Реализация слайдера-карусели на странице Main: +36
\t-при нажатии на стрелки происходит переход к новому блоку элементов: \n \t${count} + 4 = ${count += 4}\n
\t-смена блоков происходит с соответствующей анимацией карусели (способ выполнения анимации не проверяется): \n \t${count} + 4 = ${count += 4}\n
\t-слайдер бесконечен, т.е. можно бесконечно много нажимать влево или вправо, и каждый раз будет прокрутка в эту сторону с новым набором карточек: \n \t${count} + 4 = ${count += 4}\n
\t-при переключении влево или вправо прокручивается ровно столько карточек, сколько показывается при текущей ширине экрана (3 для 1280px, 2 для 768px, 1 для 320px): \n \t${count} + 4 = ${count += 4}\n
\t-каждый новый слайд содержит псевдослучайный набор карточек животных, т.е. формируется из исходных объектов в случайном порядке со следующими условиями:
\t\t--в текущем блоке слайда карточки с питомцами не повторяются:  \n \t${count} + 4 = ${count += 4}\n
\t\t--в следующем блоке нет дублирования карточек с текущим блоком. Например в слайдере из 3 элементов, следующий выезжающий слайд будет содержать 3 (из 8 доступных) новых карточки питомца, таких, каких не было среди 3х карточек на предыдущем уехавшем слайде: \n \t${count} + 4 = ${count += 4}\n
\t\t--сохраняется только одно предыдущее состояние. Т.е. при последовательном переходе два раза влево, а потом два раза вправо, мы получим набор карточек, отличный от исходного: \n \t${count} + 4 = ${count += 4}\n
\t\t--при каждой перезагрузке страницы формируется новая последовательность карточек: \n \t${count} + 2 = ${count += 2}\n
\t\t--генерация наборов карточек происходит на основе 8 объектов с данными о животными: \n \t${count} + 2 = ${count += 2}\n
\t\t--при изменении ширины экрана (от 1280px до 320px и обратно), слайдер перестраивается и работает без перезагрузки страницы (набор карточек при этом может как изменяться, так и оставаться тем же, скрывая лишнюю или добавляя недостающую, и сохраняя при этом описанные для слайдера требования): \n \t${count} + 4 = ${count += 4}\n

4)Реализация попап на обеих страницах: +12
\t-попап появляется при нажатии на любое место карточки с описанием конкретного животного: \n \t${count} + 2 = ${count += 2}\n
\t-часть страницы вне попапа затемняется: \n \t${count} + 2 = ${count += 2}\n
\t-при открытии попапа вертикальный скролл страницы становится неактивным, при закрытии - снова активным: \n \t${count} + 2 = ${count += 2}\n
\t-при нажатии на область вокруг попапа или на кнопку с крестиком попап закрывается, при этом при нажатии на сам попап ничего не происходит: \n \t${count} + 2 = ${count += 2}\n
\t-кнопка с крестиком интерактивная: \n \t${count} + 2 = ${count += 2}\n
\t-окно попапа (не считая кнопку с крестиком) центрировано по всем осям, размеры элементов попапа и их расположение совпадают с макетом: \n \t${count} + 2 = ${count += 2}\n
`);
